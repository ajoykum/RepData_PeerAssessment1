maxCon <- which.max(svd1$v[,2])
mdist<-dist(c(sub1[,10:12],maxCon))
dist(c(sub1[,10:12],maxCon))
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562:563)],centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)],centers = 6, nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size  == 29)
plot(kClust$centers[laying,1:12],pch=19)
plot(kClust$centers[laying,1:12],pch=19,ylab = "Laying Cluser")
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <-which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
library("swirl")
swirl()
swirl()
swirl()
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(x = cnames, "|",fixed = )
cnames <- strsplit(x = cnames, "|",fixed = TRUE)
cnames <- strsplit(cnames, "|",fixed = TRUE)
cnames <- strsplit(cnames,"|",fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, perl = "|", fixed = TRUE)
cnames <- strsplit(cnames,"|",fixed =
TRUE)
class(cnames)
cnames <- strsplit(as.character(cnames),"|",fixed = TRUE)
quit()
library(nycflights13)
library(tidyverse)
nycflights13::flights
flights
filter(flights, month ==1, day ==1)
jan1 <- filter(flight, month ==1, day == 1)
jan1 <- filter(flights, month ==1, day == 1)
filter(flights, month == 1 | month =11)
filter(flights, month == 1 | month == 11)
filter(flights, month == 1 | month == 11, day == 1)
str(flights)
flights$arr_delay > 120
sum(flights$arr_delay > 120)
sum(flights$arr_delay > 120,na.rm = TRUE)
filter(flights, arr_delay>120)
View(filter(flights, arr_delay>120))
filter(flights, dest == "IAH" | dest == "HOU")
unique(flights$carrier)
filter(flights, carrier == "AA" | carrier == "DL" | carrier == "UA")
filter(flights, month == 7 | month == 8 | month == 9)
str(flights)
filter(flights, arr_time>120, dep_delay<=0)
filter(flights, dep_delay>60, arr_Delay<=30)
filter(flights, dep_delay>60, arr_delay<=30)
unique(flights$dep_time)
quartile(flights$dep_time)
quantile(flights$dep_time)
quantile(flights$dep_time,na.rm = TRUE)
min(flights$dep_time)
min(flights$dep_time, na.rm = TRUE)
max(flights$dep_time, na.rm = TRUE)
filter(flights,dep_time>1&dep_time<601)
View(filter(flights,dep_time>1&dep_time<601))
View(filter(flights,dep_time>0&dep_time<601))
filter(flights, between(dep_time,left = 1,right = 600))
sum(is.na(flights$dep_time))
NA ^ 0
10 ^ 0
NA | TRUE
FALSE & NA
arrange(flights, year, month, day)
arrange(flights, desc(arr_delay))
arrange(flights, dep_time)
arrange(flights, desc(dep_time))
arrange(flights, desc(is.na(dep_time))
)
arrange(flights,desc(arr_delay))
arrange(flights, distance/air_time)
view(arrange(flights, distance/air_time))
View(arrange(flights, distance/air_time))
96/75
199/141
94/61
View(arrange(flights, desc(distance/air_time)))
762/65
1008/93
594/55
arrange(flights,distance)
select(flights, year, month, day, distance)
select(flights, origin:minute)
select(flights, -(origin:minute))
select(fllights, starts_with("a"))
select(flights, starts_with("a"))
select(flights, starts_with("a","s"))
select(flights, starts_with("a"), starts_with("b"))
select(flights, dep_time = deptime)
select(flights, deptime = deptime)
select(flights, deptime = dep_time)
rename(flights, depname = dep_time)
select(arr_time, sched_arr_time,everything())
select(flights,arr_time, sched_arr_time,everything())
select(flights,day,day)
one_of("year","month")
vars<-c("year","month","day","dep_delay","arr_delay")
select(flights,one_off(C))
select(flights,one_of(C))
?one_of
select(flights,contains("TIME"))
vars
class(vars)
vars<-c("year","month")
class(vars)
select(flights,one_of(vars))
vars<-c("year","years","nothing")
select(flights,one_of(vars))
flights
arrange(flights, desc(is.na(arr_time)))
library(nycflights13::flights)
library(dplyr)
library(nycflights13)
flights_sml <- select(flights, year:day, ends_with("delay"),distance,air_time)
View(flights_sml)
mutate(flights_sml, gain = arr_delay-dep_delay,speed = distance / air_time * 60)
mutate(flights,gain = arr_delay - dep_delay, hours = air_time/60, gain_per_hour = gain / hours)
transmute(flights, gain = arr_delay - dep_delay, hours = air_time / 60, gain_per_hours = gain / hours)
flights$dep_time
mutate(flights, dt = ((dep_time %/% 100) * 60)+dep_time %%100
)
transmute(flights, dep_time, dt = ((dep_time %/% 100) * 60)+dep_time %%100)
transmute(flights,air_time, arr_time-dep_time)
transmute(flights,air_time, art = (arr_time %/% 100)*60+(arr_time%% 100), det =  (dep_time %/% 100)*60+(dep_time%% 100), diff = art-det, air_time)
1:3 + 1:10
x <- sample(size = 10)
x <- sample(size = 10, x = 1:100)
x
rank(x)
cumsum(x)
x-sd(x)
sd(x = x)
rank(x)
min_rank(x)
max_rank(x)
min_rank(desc(x))
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
by_year <- group_by(flights, month)
summarize(by_year, mean(dep_time, na.rm = TRUE))
summarize(by_year, mean(dep_delay, na.rm = TRUE))
by_year <- group_by(flights, year)
summarize(by_year, mean(dep_delay, na.rm = TRUE))
range(flights$year)
range(flights_sml$year)
by_day <- group_by(flights, day)
summarize(by_day, mean(dep_delay, na.rm = TRUE))
by_dest<-group_by(flights, dest)
delay <-summarize(by_dest, count = n(),dist = mean(distance,na.rm = TRUE),delay = mean(arr_delay, na.rm = TRUE))
delay
delay <- filter(delay, count > 20, dest != "HNL")
delay
ggplot(data = delay, mapping = aes(x=dist, y= delay))+gemo_point(aes(size = count),alpha = 1/3)+geom_smooth(se = FALSE)
install.packages("ggplot")
library(ggplot)
library(tidyverse)
ggplot(data = delay, mapping = aes(x=dist, y= delay))+gemo_point(aes(size = count),alpha = 1/3)+geom_smooth(se = FALSE)\
ggplot(data = delay, mapping = aes(x=dist, y= delay))+gemo_point(aes(size = count),alpha = 1/3)+geom_smooth(se = FALSE)
ggplot(data = delay, mapping = aes(x=dist, y= delay))+geom_point(aes(size = count),alpha = 1/3)+geom_smooth(se = FALSE)
ggplot(data = delay, mapping = aes(x=dist, y= delay))+geom_smooth(se = FALSE)
delays <- flights %>% group_by(dest) %>% summarize(n = count(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay,na.rm = TRUE)) %>% filter(count > 20) %>% filter(dest != "HNL")
delays <- flights %>% group_by(dest) %>% summarize(count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay,na.rm = TRUE)) %>% filter(count > 20) %>% filter(dest != "HNL")
delays
delays <- flights %>% group_by(dest) %>% summarize(count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay,na.rm = TRUE)) %>% filter(count > 20) %>% filter(dest != "HNL") %>% ggplot(mapping = aes(x = dist, y= delay)) + geom_point(aes(size = count),alpha = 1/3) + geom_smooth(se = FALSE)
delays <- flights %>% group_by(dest) %>% summarize(count = n(), dist = mean(distance, na.rm = TRUE), delay = mean(arr_delay,na.rm = TRUE)) %>% filter(count > 20) %>% filter(dest != "HNL") %>% ggplot(mapping = aes(x = dist, y= delay)) + geom_point(aes(size = count),alpha = 1/3) + geom_smooth(se = FALSE)
delays
flights %>% group_by(tailnum) %>% summarize(delay = mean(arr_delay,na.rm = TRUE), count = n())
flights %>% group_by(tailnum) %>% summarize(delay = mean(arr_delay,na.rm = TRUE), count = n()) %>% ggplot(mapping = aes(x = count, y = delay)+geom_point()
)
flights %>% group_by(tailnum) %>% summarize(delay = mean(arr_delay,na.rm = TRUE), count = n()) %>% ggplot(mapping = aes(x = count, y = delay))+geom_point()
flights %>% group_by(tailnum) %>% summarize(delay = mean(arr_delay,na.rm = TRUE), count = n()) %>% filter(count>25) %>% ggplot(mapping = aes(x = count, y = delay))+geom_point()
library(tidyverse)
install.packages("lahman")
install.packages("Lahman")
library(Batting)
batters<-as.tibble(Lahman::Batting)
batters
View(Batters)
View(batters)
battin<-Batters
batting <- Batters
batting <- as.df(Batters)
batting <- batters
batters <- batting %>% group_by(playerID) %>% summarize( ba = sum(H,na.rm = TRUE) / sum(AB / na.rm = TRUE), ab = sum(AB, na.rm = TRUE)))
batters <- batting %>% group_by(playerID) %>% summarize(ba = sum(H,na.rm = TRUE) / sum(AB / na.rm = TRUE), ab = sum(AB, na.rm = TRUE))
batters <- batting %>% group_by(playerID)
batters <- batters %>% summarize()
batters <- batters %>% summarize (
ba = sum(H,na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB,na.rm = TRUE)
)
batters <- batting %>% group_by(playerID) %>% summarize(
ba = sum(H,na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB,na.rm = TRUE)
)
batters %>% filter (ab > 100) %>% ggplot(mapping = aes(x=ab,y=ba))+geom_point() + geom_smooth(se = FALSE)
batters %>% arrange(desc(ba))
library(ggplot2)
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
diamonds %>% count(cut)
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = carat), bindwidth = 0.5)
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = carat), binwidth = 1)
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = carat), binwidth = .25)
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = carat), binwidth = .75)
diamonds%>%count(cut_width())
diamonds%>%count(cut_width)
diamonds%>%count(cut_width(carat, 0.5))
smaller <- diamonds %>% filter(carat < 3)
smaller %>% count(cut_width(carat, 0.5))
ggplot(data = smaller, mapping = aes(x = carat)) + geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) + geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat) + geom_freqpoly(binwidth = 0.1)
)
ggplot(data = smaller, mapping = aes(x = carat)) + geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat)) + geom_histogram(binwidth = 0.01)
faithful
ggplot(data = faithful, mapping = aes(x = eruptions))+geom_history(binwidth = 0.25)
ggplot(data = faithful, mapping = aes(x = eruptions))+geom_histogram(binwidth = 0.25)
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = y), binwidth = 0.5)
diamonds$y
quartile(diamonds$y)
quantile(x = diamonds$y)
quantile(x = diamonds$x)
ggplot(diamonds)+geom_histogram(mapping = aes(x=y),binwidth = 0.5)+geom_freqpoly(mapping = aes(x = y, color =x), binwidth =0.5)+coord_cartesian()ylim = c(0,50))
ggplot(diamonds)+geom_histogram(mapping = aes(x=y),binwidth = 0.5)+geom_freqpoly(mapping = aes(x = y, color =x), binwidth =0.5)+coord_cartesian(ylim = c(0,50))
ggplot(data = diamonds)+ geom_freqpoly(x=x)+geom_freqpoly(x=y)+geom_freqpoly(x=z)
ggplot(data = diamonds)+ geom_freqpoly(mapping = aes(x=x))+geom_freqpoly(mapping = aes(x=y))+geom_freqpoly(mapping = aes(x=z))
ggplot(data = diamonds)+ geom_freqpoly(mapping = aes(x=x), binwidth = 1)+geom_freqpoly(mapping = aes(x=y),binwidth = 1)+geom_freqpoly(mapping = aes(x=z), binwidth = 1)
ggplot(data = diamonds)+geom_freqpoly(mapping = aes(x=z), binwidth = 1)
ggplot(data = diamonds)+ geom_freqpoly(mapping = aes(x=x), binwidth = 1)+geom_freqpoly(mapping = aes(x=y),binwidth = 1)
ggplot(data = diamonds)+ geom_freqpoly(mapping = aes(x=x), binwidth = 1)+geom_freqpoly(mapping = aes(x=y),binwidth = 1)+coord_cartesian(xlim = c(0,10)
)
ggplot(data = diamonds)+ geom_freqpoly(mapping = aes(x=x), binwidth = 1)+geom_freqpoly(mapping = aes(x=y),binwidth = 1)+coord_cartesian(xlim = c(0,10),ylim=c(5000,15000))
ggplot(data = diamonds)+ geom_freqpoly(mapping = aes(x=x), binwidth = 1)+geom_freqpoly(mapping = aes(x=y),binwidth = 1)+coord_cartesian(xlim = c(0,10),ylim=c(12000,15000))
ggplot(data = diamonds)+geom_line(mapping = aes(x=carat,y=price))
ggplot(data = diamonds)+geom_line(mapping = aes(x=carat,y=price,color =  cut))
ggplot(data = diamonds)+geom_line(mapping = aes(x=cut,y=price))
ggplot(data = smaller)+geom_line(mapping = aes(x=cut,y=price))
ggplot(data = smaller)+geom_line(mapping = aes(x=carat,y=price))
ggplot(data = smaller)+geom_line(mapping = aes(x=carat,y=price,color=cut))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("C:/Users/17449/Google Drive/RP/RR")
setwd("C:\Users\137449\Google Drive\RP\RR")
setwd("C:/Users/137449/Google Drive/RP/RR")
download.file(url = https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip)
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", destfile = "download.zip")
setwd("download")
getwd()
activity <- read.csv(file = "activity.csv",header = TRUE,colClasses = c("Integer","Date","Integer"))
activity <- read.csv(file = "activity.csv",header = TRUE,colClasses = c("integer","date","integer"))
activity <- read.csv(file = "activity.csv",header = TRUE,colClasses = c("integer","Date","integer"))
activity
summary(activity)
View(activity)
library(tidyverse)
gact %>% group_by(activity, date)
gact %>% activity %>% group_by(date)
gact <- activity %>% group_by(date)
View(gact)
gact %>% summarize(stepsperday = mean(step, na.rm = TRUE))
gact %>% summarize(stepsperday = mean(steps, na.rm = TRUE))
View(gact)
stp <- gact %>% summarize(stepsperday = mean(steps, na.rm = TRUE))
View(stp)
ggplot(data = stp, mapping = aes(x = stepsperday)) + geom_histogram(geom_histogram(binwidth = 5))
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram(binwidth = 5)
summary(stp)
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram(binwidth = 1)
stp <- gact %>% summarize(stepsperday = sum(steps, na.rm = TRUE))
View(stp)
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram()
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram(binwidth = 500)
ggplot(data = stp, aes(x = stepsperday)) + geom_barplot()
ggplot(data = stp, aes(x = stepsperday)) + geom_bar()
ggplot(data = stp, aes(x = stepsperday, y = date)) + geom_bar()
ggplot(data = stp, mapping = aes(x = stepsperday, y = date)) + geom_bar()
ggplot(data = stp, mapping = aes(x = stepsperday, y = date)) + geom_bar(stat = date)
ggplot(data = stp, mapping = aes(x = date, y = stp)) + geom_bar()
ggplot(data = stp, aes(x = stepsperday)) + geom_bar
ggplot(data = stp, aes(x = stepsperday)) + geom_bar()
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram()
ggplot(data = stp, aes(x = stepsperday)) + geom_bar()
ggplot(data = stp, aes(x = stepsperday)) + geom_bar(na.rm = TRUE)
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram(binwidth = 500) + ggtitle("A Histogram showing density of days for each group of 500 steps")
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram(binwidth = 1000) + ggtitle("A Histogram showing density of days for each group of 1000 steps")
stp <- gact %>% summarize(Mean_Steps = mean(steps, na.rm = TRUE), Median_Steps = median(steps, na.rm = TRUE))
stp
stp <- gact %>% summarize(Total_Steps = sum(steps, na.rm = TRUE), Mean_Steps = mean(steps, na.rm = TRUE), Median_Steps = median(steps, na.rm = TRUE))
View(stp)
view(gact)
View(gact)
iact <- activity %>% group_by(interval)
tsp <- iact %>% summarize(Step_Taken = mean(steps, na.rm = TRUE))
View(tsp)
plot(x = tsp$interval, y = tsp$Step_Taken, type = "l",main = "Average Steps taken by Interval across all days", xlab = "Interval", ylab = "Steps Taken"))
plot(x = tsp$interval, y = tsp$Step_Taken, type = "l",main = "Average Steps taken by Interval across all days", xlab = "Interval", ylab = "Steps Taken")
abline(h = which.max(x = tsp$Step_Taken))
which.max(tsp$Step_Taken)
tsp$Step_Taken(which.max(x = tsp$Step_Taken))
tsp$Step_Taken[which.max(x = tsp$Step_Taken)]
abline(h = tsp$Step_Taken[which.max(x = tsp$Step_Taken)])
text(x = tsp$interval[which.max(x=tsp$Step_Taken)], y = tsp$Step_Taken[which.max(x=tsp$Step_Taken),"Maxium Value"]
)
text(x = tsp$interval[which.max(x=tsp$Step_Taken)], y = tsp$Step_Taken[which.max(x=tsp$Step_Taken),"Maxium Value")
text(x = tsp$interval[which.max(x=tsp$Step_Taken)], y = tsp$Step_Taken[which.max(x=tsp$Step_Taken)], "Maximum Value")
text(x = tsp$interval[which.max(x=tsp$Step_Taken)], y = tsp$Step_Taken[which.max(x=tsp$Step_Taken)], labels = tsp$Step_Taken[which.max(x=tsp$Step_Taken)])
text(x = tsp$interval[which.max(x=tsp$Step_Taken)], y = tsp$Step_Taken[which.max(x=tsp$Step_Taken)], labels = "ZZZZZZ"+tsp$Step_Taken[which.max(x=tsp$Step_Taken)])
text(x = tsp$interval[which.max(x=tsp$Step_Taken)], y = tsp$Step_Taken[which.max(x=tsp$Step_Taken)], labels = c("ZZZZZZ",tsp$Step_Taken[which.max(x=tsp$Step_Taken)])
)
paste(tsp$interval[which.max(tsp$interval)],"Maxi")
View(iact)
sum(is.na(iact))
sum(is.na(iact$steps))
tsp
activity
view(gact)
gact
nactivity <- activity
if (is.na(nactivity$steps)) {
for (i in 1: nrow(nactivity))
{
if (is.na(nactivity$steps[i]))
{
nactivity$steps[i] <- tsp$Step_Taken[,tsp$interval== nactivity$interval[i]]
}
}
nactivity$steps[i] <- tsp$Step_Taken[tsp$interval== nactivity$interval[i]]
for (i in 1: nrow(nactivity))
{
if (is.na(nactivity$steps[i]))
{
nactivity$steps[i] <- tsp$Step_Taken[tsp$interval== nactivity$interval[i]]
}
}
nactivity
sum(is.na(nactivity))
nactivity <- group_by(nactivity, nactivity$date)
ggplot(data = nactivity,mapping = aes(nactivity$steps)) +geom_histogram(binwidth = 1000)
nstp <- nactivity %>% summarize(Total_Steps = sum(steps, na.rm = TRUE), Mean_Steps = mean(steps, na.rm = TRUE), Median_Steps = median(steps, na.rm = TRUE))
ggplot(data = nactivity,mapping = aes(nactivity$steps)) +geom_histogram(binwidth = 100)
ggplot(data = activity,mapping = aes(activity$steps)) +geom_histogram(binwidth = 100)
ggplot(data = nactivity,mapping = aes(nactivity$steps)) +geom_histogram(binwidth = 100)
View(nstp)
plot(x = stp$date, y = stp$Mean_Steps,type = "l", col = red)
plot(x = stp$date, y = stp$Mean_Steps,type = "l", col = "red")
plot(x = stp$date, y = stp$Mean_Steps,type = "p", col = "red")
line(x = nstp$`nactivity$date`,y = nstp$Mean_Steps, type = "p", col = "green")
line(x = nstp$`nactivity$date`,y = nstp$Mean_Steps, col = "green")
line(x = nstp$`nactivity$date`,y = nstp$Mean_Steps)
lines(x = nstp$`nactivity$date`,y = nstp$Mean_Steps, type = "p", col = "green")
plot(x = stp$date, y = stp$Mean_Steps,type = "p", col = "red")
lines(x = nstp$`nactivity$date`,y = nstp$Mean_Steps, type = "p", col = "green")
nstp$source <- "Imputed"
View(nstp)
bind_rows
?bind_rows
nstp <-bindrows(nstp,stp)
nstp <-bind_rows(nstp,stp)
View(nstp)
nstp$sourcce[is.na(nstp$source)] <- "Original"
nstp$source[is.na(nstp$source)] <- "Original"
View(nstp$source)
View(nstp)
nstp$sourcce <- null
nstp$sourcce <- NULL
View(nstp)
nstp$date[is.na(nstp$date)] <- nstp$`nactivity$date`
View(stp)
View(nstp)
summary(stp)
summary(nstp)
nactivity
weekdays(nactivity$`nactivity$date`)
apply(nactivity$`nactivity$date`\
apply(nactivity$`nactivity$date`,2, function(x) { if(weekdays(x) %in% c("Saturday","Sunday"))}
apply(nactivity$`nactivity$date`,2, function(x)  if(weekdays(x) %in% c("Saturday","Sunday")))
apply(nactivity$`nactivity$date`,2, function(x)  if(weekdays(x) %in% c("Saturday","Sunday"))
)
apply(nactivity$`nactivity$date`,2, function(x)  if(weekdays(x) %in% c("Saturday","Sunday")))
apply(nactivity$`nactivity$date`,2, function(x)  if(weekdays(x) %in% c("Saturday","Sunday")),TRUE,FALSE)
apply(nactivity$`nactivity$date`, function(x)  if(weekdays(x) %in% c("Saturday","Sunday")),TRUE,FALSE)
apply(nactivity$`nactivity$date`,2,function(x) ifelse(x %in% c("Saturday", "Sunday"),1,0))
apply(nactivity$`nactivity$date`,function(x) ifelse(x %in% c("Saturday", "Sunday"),1,0))
activity$weekday <- ifelse(weekdays(activity$date) %in% c("Saturday","Sunday"),"Weekend","Weekday")
activity
library(lattice)
xyplot(~nactivity$steps | nactivity$weekday)
nactivity
nactivity$weekday <- ifelse(weekdays(nactivity$`nactivity$date`) %in% c("Saturday","Sunday"),"Weekend","Weekday")
nactivity$weekday <- as.factor(nactivity$weekday)
xyplot(~nactivity$steps | nactivity$weekday)
ungroup(nactivity)
nactivity <- group_by(nactivity, nactivity$weekday, nactivity$interval)
wstp <- summarize(nactivity, AvgSteps = mean(nactivity$steps))
nactivity <- nactivity %>% group_by(weekday) %>% group_by(interval)
summary(nactivity)
wstp <- summarize(nactivity, AvgSteps = mean(nactivity$steps,na.rm = TRUE))
wstp
nactivity <- nactivity %>% group_by(interval,weekday)
wstp <- summarize(nactivity, AvgSteps = mean(nactivity$steps,na.rm = TRUE))
wstp
wstp <- summarize(nactivity, AvgSteps = sum(nactivity$steps,na.rm = TRUE))
wstp
nactivity
knitr::opts_chunk$set(echo = TRUE)
activity <- read.csv(file = "activity.csv",header = TRUE,colClasses = c("integer","Date","integer"))
library(tidyverse)
gact <- activity %>% group_by(date)
stp <- gact %>% summarize(stepsperday = sum(steps, na.rm = TRUE))
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram(binwidth = 500)
stp <- gact %>% summarize(Total_Steps = sum(steps, na.rm = TRUE), Mean_Steps = mean(steps, na.rm = TRUE), Median_Steps = median(steps, na.rm = TRUE))
iact <- activity %>% group_by(interval)
tsp <- iact %>% summarize(Step_Taken = mean(steps, na.rm = TRUE))
plot(x = tsp$interval, y = tsp$Step_Taken, type = "l",main = "Average Steps taken by Interval across all days", xlab = "Interval", ylab = "Steps Taken")
ind <- which.max(tsp$Step_Taken)
la <- paste("Maximum Step of",round(tsp$Step_Taken[ind],digits = 0), "was taken on the", tsp$interval[ind],"interval")
text(x = tsp$interval[ind], y = tsp$Step_Taken[ind],labels = la)
sum(is.na(activity$steps))
sum(is.na(activity$date))
sum(is.na(activity$interval))
nactivity <- activity
sum(is.na(nactivity))
for (i in 1:nrow(nactivity))
{
if(is.na(nactivity$steps[i]))
{
nactivity$steps[i] <- tsp$Step_Taken[tsp$interval ==  nactivity$interval[i]]
}
}
sum(is.na(nactivity))
nactivity <- group_by(nactivity, nactivity$date)
nstp <- nactivity %>% summarize(Total_Steps = sum(steps, na.rm = TRUE), Mean_Steps = mean(steps, na.rm = TRUE), Median_Steps = median(steps, na.rm = TRUE))
ggplot(data = nstp,mapping = aes(nstp$Total_Steps)) +geom_histogram(binwidth = 500)
summary(stp)
summary(nstp)
nactivity$weekday <- ifelse(weekdays(nactivity$`nactivity$date`) %in% c("Saturday","Sunday"),"Weekend","Weekday")
nactivity$weekday <- as.factor(nactivity$weekday)
```{r groupbyweekday}
```{r grpwkday}
nactivity <- nactivity %>% group_by(interval, weekday)
wstp <- nactivity %>% summarize(AvgSteps = mean(steps))
```
activity <- read.csv(file = "activity.csv",header = TRUE,colClasses = c("integer","Date","integer"))
gact <- activity %>% group_by(date)
stp <- gact %>% summarize(stepsperday = sum(steps, na.rm = TRUE))
ggplot(data = stp, aes(x = stepsperday)) + geom_histogram(binwidth = 500)
stp <- gact %>% summarize(Total_Steps = sum(steps, na.rm = TRUE), Mean_Steps = mean(steps, na.rm = TRUE), Median_Steps = median(steps, na.rm = TRUE))
``` {r groupbyinterval}
iact <- activity %>% group_by(interval)
tsp <- iact %>% summarize(Step_Taken = mean(steps, na.rm = TRUE))
plot(x = tsp$interval, y = tsp$Step_Taken, type = "l",main = "Average Steps taken by Interval across all days", xlab = "Interval", ylab = "Steps Taken")
ind <- which.max(tsp$Step_Taken)
la <- paste("Maximum Step of",round(tsp$Step_Taken[ind],digits = 0), "was taken on the", tsp$interval[ind],"interval")
text(x = tsp$interval[ind], y = tsp$Step_Taken[ind],labels = la)
nactivity <- activity
sum(is.na(nactivity))
for (i in 1:nrow(nactivity))
{
if(is.na(nactivity$steps[i]))
{
nactivity$steps[i] <- tsp$Step_Taken[tsp$interval ==  nactivity$interval[i]]
}
}
sum(is.na(nactivity))
nactivity <- group_by(nactivity, nactivity$date)
nstp <- nactivity %>% summarize(Total_Steps = sum(steps, na.rm = TRUE), Mean_Steps = mean(steps, na.rm = TRUE), Median_Steps = median(steps, na.rm = TRUE))
ggplot(data = nstp,mapping = aes(nstp$Total_Steps)) +geom_histogram(binwidth = 500)
nactivity$weekday <- ifelse(weekdays(nactivity$`nactivity$date`) %in% c("Saturday","Sunday"),"Weekend","Weekday")
nactivity$weekday <- as.factor(nactivity$weekday)
```
Now we are grouping the nactivity by weekday
```{r grpwkday}
nactivity <- nactivity %>% group_by(interval, weekday)
wstp <- nactivity %>% summarize(AvgSteps = mean(steps,na.rm = TRUE))
View(wstp)
xyplot(interval~Avgsteps|weekday, data = wstp)
xyplot(interval~AvgSteps|weekday, data = wstp)
xyplot(AvgSteps~interval|weekday, data = wstp)
xyplot(AvgSteps~interval|weekday, data = wstp, type = "l")
par(mfrow = c(2,1))
xyplot(AvgSteps~interval|weekday, data = wstp, type = "l")
par(mfrow = c(1,1))
xyplot(AvgSteps~interval|weekday, data = wstp, type = "l")
par(mfrow = c(1,2))
xyplot(AvgSteps~interval|weekday, data = wstp, type = "l")
par(mfrow = c(2,1))
xyplot(AvgSteps~interval|weekday, data = wstp, type = "l")
par(mfrow = c(2,1))
xyplot(AvgSteps~interval|weekday, data = wstp, type = "l")
xyplot(AvgSteps~interval|weekday, data = wstp, type = "l",layout = c(1,2))
getwd()
setwd("C:/Users/137449/Google Drive/RP/RR/RepData_PeerAssessment1")
